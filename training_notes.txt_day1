setting up:
echo "# spark-training" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/cbitkvk/spark-training.git
git push -u origin master


how to add files go to folder spark-training

git add .
git commit -mm "comment"
git push -u origin master



user:root
password: redhat


trainer ip: 192.168.16.127


install java from oracle ( which has name called hotspot)
jdk-8u151-linux-x64.rpm

set java_home and path variables


1. Immutability -- val -- does not allow modification of data
2. Type inference -- automatically understand the datatype for a variable or val

eg: val n="hello"
p: String = hello

Here it identified the datatype to be String without we defining it.


-----------------------
how to compile code in scala
scalac < scala code file>
it creates two class files based on the object name.
-----------------------

sample program: test.scala file
object myHello {

def main(args: Array[String]){
var n:String="hello"
println(n)
}
}


compile:
scalac test.scala
it will create myHello$.class and myHello.class. Two classfiles for each object defined in the test.scala file.



scala works on singleton object.



---------------------------------------------------------------------

## Multi constructor. creating a constructor which would work for different parameters list. Here default is 3 arguements but we created a "this" special method which 
would set the bal field to 0 by default when we create a instance of acct with only 2 parameters.

class acct(name:String, actid:Int, bal:Int){

def this(n:String,a:Int)={
this(n,a,0)
}

def show()={
println(name)
println(actid)
println(bal)
}

}

object pk{
def main(args: Array[String])={
var n=new acct("hello",123,12)
n.show()

var p=new acct("hello",123)
p.show()
}
}



## Result: 
[root@localhost examples]# scala multiconstruct.scala
hello
123
12
hello
123
0


-------------------------

overriding the main function

object hell {
def main(args:Array[String]){
main(Array(args(0).toInt,args(1))) ## here we are callig another main function which takes the input of Array(Any) which means a list of objects where each object has any data type
}

def main(args:Array[Any]){
for (i<- 1 to args(0).toString.toInt) {
print(i, args(1).toString)}
}
}


result: (1,viay)(2,viay)(3,viay)(4,viay)(5,viay)(6,viay)(7,viay)(8,viay)(9,viay)(10,viay)(11,viay)(12,viay)(13,viay)(14,viay)(15,viay)(16,viay)(17,viay)(18,viay)(19,viay)(20,viay)(21,viay)(22,viay)(23,viay)(24,viay)(25,viay)(26,viay)(27,viay)(28,viay)(29,viay)(30,viay)(31,viay)(32,viay)(33,viay)(34,viay)(35,viay)(36,viay)(37,viay)(38,viay)(39,viay)(40,viay)(41,viay)(42,viay)(43,viay)(44,viay)(45,viay)(46,viay)(47,viay)(48,viay)(49,viay)(50,viay)(51,viay)(52,viay)(53,viay)(54,viay)(55,viay)(56,viay)(57,viay)(58,viay)(59,viay)(60,viay)(61,viay)(62,viay)(63,viay)(64,viay)(65,viay)(66,viay)(67,viay)(68,viay)(69,viay)(70,viay)(71,viay)(72,viay)(73,viay)(74,viay)(75,viay)(76,viay)(77,viay)(78,viay)(79,viay)(80,viay)(81,viay)(82,viay)(83,viay)(84,viay)(85,viay)(86,viay)(87,viay)(88,viay)(89,viay)(90,viay)(91,viay)(92,viay)(93,viay)(94,viay)(95,viay)(96,viay)(97,viay)(98,viay)(99,viay)(100,viay)(101,viay)(102,viay)(103,viay)(104,viay)(105,viay)(106,viay)(107,viay)(108,viay)(109,viay)(110,viay)(111,viay)(112,viay)(113,viay)(114,viay)(115,viay)(116,viay)(117,viay)(118,viay)(119,viay)(120,viay)(121,viay)(122,viay)(123,viay)


-------

var funcobj= (n:Int, p:Int)=> (n + p)

this creates a function object and assings to funcobj can take two input parameters and return its sum value.

this being var, the logic of funcobj cant be modified but the signature should be retained

funcobj= (n:Int, p:Int)=> (n + p -1 ) ## this is allowed
funcobj= (n:Int, p:String)=> (n + p) ## This is not allowed as the signature is changed from (Int, Int) to (Int, String)




-------------------------------------------
#creates the set based on the range.

scala> var s=(1 to 100).toSet
s: scala.collection.immutable.Set[Int] = Set(69, 88, 5, 10, 56, 42, 24, 37, 25, 52, 14, 20, 46, 93, 57, 78, 29, 84, 61, 89, 1, 74, 6, 60, 85, 28, 38, 70, 21, 33, 92, 65, 97, 9, 53, 77, 96, 13, 41, 73, 2, 32, 34, 45, 64, 17, 22, 44, 59, 27, 71, 12, 54, 49, 86, 81, 76, 7, 39, 98, 91, 66, 3, 80, 35, 48, 63, 18, 95, 50, 67, 16, 31, 11, 72, 43, 99, 87, 40, 26, 55, 23, 8, 75, 58, 82, 36, 30, 51, 19, 4, 79, 94, 47, 15, 68, 62, 90, 83, 100)

#function which says a number is even or not.
scala> def isEven(i:Int)=i%2==0
isEven: (i: Int)Boolean

#here it takes each value in s(set) and for value in s, x is set to that value and then checks if that x is even or not. if it is even , the condition is true and this would
give the value of x . so the result is a bunch of numbers for which condition is satisfied.

scala> s.filter(x=> isEven(x))
res7: scala.collection.immutable.Set[Int] = Set(88, 10, 56, 42, 24, 52, 14, 20, 46, 78, 84, 74, 6, 60, 28, 38, 70, 92, 96, 2, 32, 34, 64, 22, 44, 12, 54, 86, 76, 98, 66, 80, 48, 18, 50, 16, 72, 40, 26, 8, 58, 82, 36, 30, 4, 94, 68, 62, 90, 100)

scala> isEven(100)
res8: Boolean = true

## creating a lambda function
scala> var p=(x)=> isEven(x)
p: Int => Boolean = $$Lambda$1310/1872155551@5f49c09d

scala> s.filter(p)
res9: scala.collection.immutable.Set[Int] = Set(88, 10, 56, 42, 24, 52, 14, 20, 46, 78, 84, 74, 6, 60, 28, 38, 70, 92, 96, 2, 32, 34, 64, 22, 44, 12, 54, 86, 76, 98, 66, 80, 48, 18, 50, 16, 72, 40, 26, 8, 58, 82, 36, 30, 4, 94, 68, 62, 90, 100)
